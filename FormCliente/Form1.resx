<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEASEgAAAEACADIGwAAFgAAACgAAABIAAAAkAAAAAEACAAAAAAAQBQAAAAAAAAAAAAAAAEAAAAB
        AABMcEcALFOYACE9XgA0XokAOWiWAEJidQBCdKgAOVh3AD5nkwAwV4YAMVN+ACpBYQAOFBUAKTxOAAYL
        EQAvUnoAMliFAEJ3qgCFrsUAK1WIACpIaAAxTWsANmWOAD5wpQApRWQAK0pzADJCVAAhLDQAJUJwAFF2
        nwBbf6UAIkRrAEBhggB5en0AP1hzADtYfABBZqIAIi87AKutrwAkMCEALUlyACQ8XAAqUooAKE6TADhV
        bgAQGSMAQmuaAEZhegCRkpIAOTo8ADJDUwAsXI0ASV8YABgiIQAFCAcAJUeBACpQggBEa6MAMEIWADdW
        ZAAkR24APFNgADJDUgA3h9IAQma5AGBuggAuPEkAPFAnADI5FAAYL1oANUoeADNPVwAqTnkAFSAwAF1v
        hwBOcJEAPFiZACU8WAA/gdcAWHYcAEKE1wBDWScALTwXACArEQA5dZkASW+sADd4tgA3apQAX3+UACpX
        hABFh9UAYYCzAA8eNgA3argANkpfAFxkbQBaaXcAjZehAG99iwA6nO8AOnPeAFq99wBiaxkAjL7wADqZ
        7gA6lOwAve//AHulIQA3bdEAOo3pADeR4AAVJkIAMn/DACxVngAlR3YAOoDjAB46bwBIq/MAI0NnALHl
        +QAyY7sAMl6wADhw1gBStfUANGfDADaM1wAICwoAKF6RAHKr1wA6feIAeJ8fAFe69gCax98AOofnACth
        lgBopM8ALlupADlx2wArWH0AGDpdADdtkwAubacAQYutADqCyQA5l+gAI0WFAC90tQBRot0AUJLOAEJf
        fABDibgAOJTkAFZvUwBjcRkAVGEYAHykvABzmB4AP6LwAChPiwA0dssAKUqAACE1TwCk3O8APFmSAFp3
        sgBHXqUAZqjFAF6gyAA6ed8AOnbfAFl7lgAoWIgAU3CMAD2I1wBoeRoAL1J3AIa56gAePmIAUJ/WAEhu
        kQCDg4MAWpa+AFNTUwA2a80AhZGaAN3d3gBYbH0AIl2PAFCVugAxYIsAfbPfAEqg5gCWyPIASFudADNQ
        ZwBKa6kANEl6ADA1LQAXJjAAUm1hADl4oAB1dXUALz1EAEBxxABan70Ao9T0AKve9wA+brcAVarlANDQ
        0ADBw8YA7u7uAI+5zgBvkJ4Al5mgAFFeLAAvZKIAW2w+AFpxRABdbDMAOn25AENSFgA4S1MAZou+ADBa
        kwBUkbIAamtrAA4XKABZtOsAS1dcALO1uQBJSUkA4eHiAP39/QDZ2dkAao4cADRapQBohBsAM0NtAE2C
        qACIxNsAQ2GwAE+G3QBUh7EAebfUAGJnbACsvc8AbZHPALDQ5ACfo6cAOIDcAGia3wBOgYMAQorQAE53
        twAQMF4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGxoAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        GiVftjAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAALC0tMea5ydMhGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAS/nRIbnp0uomGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASibpuSHo6PWskQ0AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEm+PKsrGNtkQ0AAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA27
        Y2NjaG2FcSkXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcLCwsLGAAA
        AAAAAAAAAAAAAA8fn21thWRkZHQLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAB0nntOLiMQsAAAAAAAAAAAAAAAAPKmxkZGRkZHQcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAHJeIh0dPRwzdNGAAAAAAAAAAAAAAAFip6ZGRkZHQcAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+tjDJMDD3ZHp5KhAAAAAAAAAAAAAAAEm3ZGR8iHQcAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGGrTWpP1paW1kbCgsAAAAAAAAAAAA
        AC18ZGR67G8cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUHzkGNjY2Nt
        ZGxFDwAAAg4ODg4O/3mJZGRkerdFDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAA5TD9ukG1kZHpsb35+jo6Ojo6KeGRkZGRkZGRkbwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAXBEhy8WR6eOCv77y8vI6OyIp5ZGRkZGRkZGRkARARAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgpb3hkZGyRobOAsGdnsLW8wnRkgXNzgWRkZGRkZG8c
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCmIZGRkeqAi76enh4CwZ2eHr3GB
        aWNjaHOBZGRkZHF+GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5FzhYWpAarN
        zcBngIeHZ2ffdIFpY2NjY2Npc2RkZGRvIgsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAEPJ9pY2MBEs5qanfOwGeAh2cei2ljY2NjY2NjaXNkZGR5wi8LAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAPi2ljY4aMpqam8Gpqd8BngOF2i2NjY2NjY2NjY4VkZGRkDIAzAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPi2NjY3KEoqKi8My+d3dnvoqNq2N1e3tjY2NjY2hzZGRk
        DL5UCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWf2Njf8h3ampqanfAp6Jnr5dt+nWD
        ZWWDY2NjY2NogWRkfsaMCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWyGV1q4R3d3dq
        ampqasx2Y2NphXVlZWVlY2NjY2NjY2OxcmTyHgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAuWtC/jOHMzKaiondqauGWY2NjY3WDZWV7Y2NjY2NjY33jZGSIbwkAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAA8iM1Gpqas6mtfR3hIyXY2NjY2N1e3tjY2NjY2NjY7FyZGRkcRkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7GLutXVas7NZ4D0lT9jY2NjY2NjY2NjY2NjY2NjcHRs
        ZGRkKxkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIPQ0NCAAAAAUNFIqKyn521axnZ2fz4G5jY2NjY2Nj
        Y2NjY2NjY2NwcWxkZGRkiAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABKybQhQhsbBiCMlmW1uLR2kn+z
        lcPLt3NoY2NjY2NjY2NjY2NjY218t2RkZGRkiAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQdImo3Fx
        JbJlZWXUudMMY5Bwkn94ZGRoY2NjY2NjY2NjY2NjbahkZGRkZGR8MwgAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAC+ekemRkfqplp7qmuLS2Y2NjY26Go3poY2NjY2NjY2NjY2NphWlzZGRkZGR4CgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAA+DHSJZGTj5vaW5dK4p+Tke2NjY2OQqIloY2NjY2NjY2NjeqtoaGNoaGip
        ZHw4BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcx0daWc8bq09bn6ei4p2VlZXtjY2NjY2NjY2NjY2No
        l25ydnarkGNjY2NjqXgTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe26taPY6q6uuXnufm10NCDZWV7
        Y2NjY2NjY2NjaG6fnnJsY2OPjWNjY2NjcBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhgMrablHBw
        ZHihIh33pKSyk5N1Y2NjY2NjY2OXknGgfGRkY2NjY2NjY2NwEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAALmEmYgoKiIh5AbOAsGffpKOPrWNjY2NjY5eNnnhkZGRkbWNjY2NjcJITAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABCXFQg0JCQkTo7WHh4ewHY3LrWNjY2NjkNh5ZGRkZGRkqWNjY4+NEwkG
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcKOJ67u7uSCk0lImdnvoAdkmNjY2NjY2NjveVkZGRk
        ZGRkqW6GhjMDFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABjh4P2ljY2NjcH+LcqpnZx3cY2Nj
        Y2NjY2N/15p0ZGRkZAGgoCoWFggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASH1pbW1jY2Nj
        Y5CSnnQeZ69uY2NjY2NjY3/XZmZExr1xchAHBwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAwZ2Dg5SUnWNjY2Ot8Wz7s49oY2NjY2Njf9dmZmZmZt0MfjYORgAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAACnWVlZWVlZWWdY2NjbakBeGljY2NjY5ereYnZZmZm7WtrgplmOgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoZWVlZWVlZWV9cI+/aG2pqGljY2NjbnZvdnmJ2WaugmuC
        rt2ZOgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAZWVlZWVlZWWh48X2n2OFaWNjY2N9
        cm/EwcR5bNpmrpyumq6CNDsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOv2VlZWVlZWUM
        ocXShmNjY2NjY2nYb6PspcHEns9mZmZm3etrnFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAUJRlZWVlZWUMyd7mhmNjY2NjY30fFHlky6XBb8vHZmaampxrgjRDAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAETmMZWVlZWXu4ri6hmNjY2NjbgIPA3FkZKXEPXTLx2aZnGtra+tSAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAShZWVlZWWT7pVyfWNjY2Njny0AA3FkZKWxBYtks5rt
        a2tra4JPUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlWyZWVlZWVl0LKTY2NjY2NjXAgA
        A3FkZKAPERixrcdmnGtra4KZNEZDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcCAgIQAAAfAoplZWVlZWXD
        r2VldWNjY2OoDgAAJM9kZHIFAAdvaPxmmZxrgplmZmZENjoFAAA+NjUAAAAAAAAAAAAAAAAAAAc3bHoB
        dnZsbIrkZWVlZWXD+MKMv25uvcYMFwYAAAmIZHIFAAdZbpdzx9tmZmZmZmZmZmZ+fsXeARoAAAAAAAAA
        AAAAAAAAAAA7H0x8fHpkiXG9ZWVlZWVlpM0SlZWVEoSEIjIIACRAiaAFAAA7MijPfYGY2trbZmZmZtvZ
        mHg3NQAAAAAAAAAAAAAAAAAAAAAAABAUFF1xK6GKk2WTlLKD5P7fhISEWyMU1JsyBwAkQKUFAAAAACwU
        IFZwcK3cmJiYmNhxK0I1AAAAAAAAAAAAAAAAAAAAAAAAAAAAACxewh4KV5aNhs+UZYO/y6MjCAAACiDV
        IwQAJAoGAAAAAAAAAD1HRyCNnpGRkSkbGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGC8dHQMABDzcdZ2e
        dXV9fzwEAAAAAASsmxkAAAAAAAAAAAAAAAAAAAUNJycnJwUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY
        L6oJEAAAAAmWZZ12f4sfAwQAAAAAAASsmxkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABBYqgMRAAAAAAmWlOBLFhYEAAAAAAAABiObIAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABmb3gcAAAAAADmlJAQRAAAAAAAAAAAABZXUCgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmb3gcAAAAAAAYXEQAAAAAAAAAAAAAAKNQj
        BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVEsoHBQAAAAAAAAAA
        AAAAAAAAAAAAAhQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        FRLKLwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAABUSEhUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AAAA////////////AAAA////////
        ////AAAA////////////AAAA////////////AAAA///////5////AAAA///////A////AAAA//////4A
        f///AAAA//////4Af///AAAA//////4AP///AAAA//////8AP///AAAA//////8AH///AAAA///8D/8A
        H///AAAA///4B/+AH///AAAA///wAf/AH///AAAA///wAP/gH///AAAA///wAH/gH///AAAA///4ADAA
        D///AAAA///+AAAAB///AAAA///+AAAAA///AAAA///8AAAAA///AAAA///4AAAAAf//AAAA///4AAAA
        AP//AAAA///wAAAAAH//AAAA///wAAAAAH//AAAA///wAAAAAD//AAAA///wAAAAAD//AAAA///wAAAA
        AB//AAAA///wAAAAAB//AAAA///4AAAAAB//AAAA///4AAAAAB//AAAA/+DgAAAAAB//AAAA/+AAAAAA
        AB//AAAA/+AAAAAAAB//AAAA//AAAAAAAD//AAAA/+AAAAAAAD//AAAA/8AAAAAAAH//AAAA/8AAAAAA
        AP//AAAA/8AAAAAAAf//AAAA//AAAAAAA///AAAA//AAAAAAA///AAAA/8AAAAAAD///AAAA/4AAAAAA
        P///AAAA/4AAAAAB////AAAA/4AAAAAD////AAAA/wAAAAAD////AAAA/wAAAAAD////AAAA/wAAAAAB
        ////AAAA/wAAAAAB////AAAA/4AAAAAA////AAAA/4AAAAAA////AAAA/8AABAAAf///AAAA/4AABAAA
        H///AAAAgwAADAgAAx//AAAAgAAABggAAB//AAAAwAAAAgwAAD//AAAA8AAAAQ8AAH//AAAA/gAAYI/g
        Af//AAAA/BAA8P/8B///AAAA+DgB8P//////AAAA8HgH4P//////AAAA8Pg/4f//////AAAA8Pj/4f//
        ////AAAA+D//5///////AAAA/B//////////AAAA/h//////////AAAA/z//////////AAAA////////
        ////AAAA////////////AAAA////////////AAAA////////////AAAA////////////AAAA
</value>
  </data>
</root>